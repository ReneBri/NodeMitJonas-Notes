What is MongoDB?
MongoDB is a NoSQL database. Each MongoDB database can contain multiple 'collections' - think a users collection and a tours collection, etc. Each of these collections can contain one or more pieces of structured data, called a 'document'. Each document contains an object about one single entity, zum beispiel a blog post or a user, etc.

    Mongo is a good document database because it is flexible and scalable AND also had good querying and indexing capabilities.

    Key features:
    1. Document based: MongoDB stores data in documents (field value pair data structures, NoSQL)
    2. Scalable: Very easy to distribute data across multiple machines as your users and amount of data grows.
    3. Flexibility: No document data schema requires, so each document can have a different number of value pairs and types of fields.
    4. Performant: Thanks to features like embeddd data models, indexing, sharding, flexible documents, native duplication, etc.
    5. MongoDB is a free and open sourse database published under the SSPL lisence.

MongoDB used the BSON Data format for its data storage. It is the same as JSON but the values are typed. meaning theres no need to surround booleans or ints in quotes.

Key value pairs.... The "lock" is called a field and the key is the typed value. Eg: "Field": "Value".

MongoDB also has "embedded documents". For example imagine we have a product and then embedded withing that product is a "reviews" array. This is something not found in a relational database, but is possible in a NoSQL database.

Embedding (AKA denormalizing): is the act of including related data into a single document. This allows quicker access and easier data models, although apparently, it isn't always the best solution. This can help with performance though.

The maximum size for each BSON document is 16mb but this may increase in future. Ans each BSON document contains a unique id which acts as a key for that document. It is automatically generated when we create the document.

What is Mongoose?
Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js providing a higher level of abstraction. An ODM is just a way for us to write javascript code which will interact with the database.

    Mongoose allows for rapid and simple development of MongoDB database interactions.

    Some features include: Schemas to modal data and relationships, easy data validation, simple query API, middleware, etc.

    Mongoose Schema: Where we model our data by describing the structure of the data, default values and validation.

    Mongoose Model: A wrapper for the schema, providing an interface to the database for CRUD operations. Basically the same as how Node wraps everything in another function which gives it the properties and methods like required() and __dirname, etc.

Creating and using a new model is basically like makeing a new class. Let me explain with code:

    First, we must create our schema:
    ///////////////////////////////////////////////

    const tourSchema = new mongoose.Schema({
        name: String,
        price: Number,
        rating: Number
    });

    ///////////////////////////////////////////////

    Easy enough, then we much create a new model passing in the new models name and the schema in as arguments. The first parameter here is what our documents will be stored under in the collection.

    ///////////////////////////////////////////////

    const Tour = mongoose.model('Tours', tourSchema);

    ///////////////////////////////////////////////

    And now here is why it is similar to creating a new class in JS:

    ///////////////////////////////////////////////

    const newTour = new Tour({
        name: "Big Ol' Hike",
        price: 123,
        rating: 4.2
    });

    ///////////////////////////////////////////////

    And now with that we can use whatever methods that are associated with mongooses tour model, on our newTour model.

MVC architecture
Model view controller or the MVC for short

    In this architecture the model layer is concerned with the applications data & the business logic.

    The controller layer: the purpose of the controller layer is to handle the applications requests, interact with models and send back responses to the client.

    The ivew layer is necessary if we have a graphical interface in the app. For example if we're building a server side rendered website. Like the one in this project.

    It goes like so:
        REQUEST => ROUTER => CONTROLLER (handler function) => depending on the request the controller might have to then connect with one of the MODELS, like from the database => If there wasn't any server side rendering there, thats where the response would be sent back but since we are it then goes to the VIEW, which contains all of the presentation logic. The all of that is sent back as the response.

    Application logic vs. business logic

        Application logic: is all the code thats only concerned about the applications implimentation not the underlying business problem we're trying to solve. Think requests, responses, etc. It's about the apps more technical aspects. And if we have views the application logic serves as a bridge between the the model and view layer.

        Business Logic is all the code that actually solves the business problem that we set out to solve... Lets say that our goal is to show tours to customers and then sell them. And the code directly related to that (business rules, how the business works and needs) is the business logic.
            Some examples:
            - Creating a new tour in the DB
            - Checking a user is valid when logging in
            - Validating user input data
            - Ensuring only users who bought a tour can review it

        Sometimes these overlap but we should do our best to keep our application logic in our controllers and our business logic in out models. Fat models/Thin Controllers is a philosophy where you offload as much as you can into the models to keep the controllers as lean as possible.
